timeit

(base) linux-pc@linuxpc-750XDA:~/바탕화면/develop/Numerical_HW1$ python3 -m timeit -n 100000 -r 1 "import insertion_sort"
100000 loops, best of 1: 13.1 usec per loop
(base) linux-pc@linuxpc-750XDA:~/바탕화면/develop/Numerical_HW1$ python3 -m timeit -n 100000 -r 1 "import selection_sort"
100000 loops, best of 1: 15.8 usec per loop
(base) linux-pc@linuxpc-750XDA:~/바탕화면/develop/Numerical_HW1$ python3 -m timeit -n 100000 -r 1 "import selection_sort"
100000 loops, best of 1: 15.8 usec per loop
(base) linux-pc@linuxpc-750XDA:~/바탕화면/develop/Numerical_HW1$ python3 -m timeit -n 100000 -r 1 "import insertion_sort"
100000 loops, best of 1: 12.7 usec per loop
(base) linux-pc@linuxpc-750XDA:~/바탕화면/develop/Numerical_HW1$ python3 -m timeit -n 100000 -r 1 "import selection_sort"
100000 loops, best of 1: 16 usec per loop
(base) linux-pc@linuxpc-750XDA:~/바탕화면/develop/Numerical_HW1$ python3 -m timeit -n 100000 -r 1 "import insertion_sort"
100000 loops, best of 1: 13.2 usec per loop


line_profiler
Wrote profile results to selection_sort.py.lprof
Timer unit: 1e-06 s

Total time: 7.54477 s
File: selection_sort.py
Function: selection_sort at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                           @profile
     5                                           def selection_sort(arr1d: np.ndarray) -> np.ndarray:
     6         1          2.0      2.0      0.0      if len(arr1d.shape) >= 2:
     7                                                   print("정렬 불가")
     8                                                   exit()
     9
    10         1          3.0      3.0      0.0      if isinstance(arr1d[0], np.int32) or isinstance(arr1d[0], np.int64) or isinstance(arr1d[0], np.float64):
    11         1          1.0      1.0      0.0          pass
    12                                               else:
    13                                                   print("정렬 불가")
    14                                                   exit()
    15
    16      5001       1149.0      0.2      0.0      for i in range(len(arr1d)):
    17      5000       1114.0      0.2      0.0          minimum_index = i
    18  12502500    2810297.0      0.2     37.2          for j in range(i + 1, len(arr1d)):
    19  12497500    4721786.0      0.4     62.6              if arr1d[j] < arr1d[minimum_index]:
    20     35068       8039.0      0.2      0.1                  minimum_index = j
    21      5000       2378.0      0.5      0.0          arr1d[i], arr1d[minimum_index] = arr1d[minimum_index], arr1d[i]
    22
    23         1          0.0      0.0      0.0      return arr1d





Wrote profile results to insertion_sort.py.lprof
Timer unit: 1e-06 s

(base) linux-pc@linuxpc-750XDA:~/바탕화면/develop/Numerical_HW1$ kernprof -l -v insertion_sort.py
Wrote profile results to insertion_sort.py.lprof
Timer unit: 1e-06 s

Total time: 5.82008 s
File: insertion_sort.py
Function: insertion_sort at line 3

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     3                                           @profile
     4                                           def insertion_sort(arr1d: np.ndarray) -> np.ndarray:
     5         1          2.0      2.0      0.0      if len(arr1d.shape) >= 2:
     6                                                   print("정렬 불가")
     7                                                   exit()
     8
     9         1          4.0      4.0      0.0      if isinstance(arr1d[0], np.int32) or isinstance(arr1d[0], np.int64) or isinstance(arr1d[0], np.float64):
    10         1          0.0      0.0      0.0          pass
    11                                               else:
    12                                                   print("정렬 불가")
    13                                                   exit()
    14
    15      5000       1115.0      0.2      0.0      for i in range(1, len(arr1d)):
    16      4999       1470.0      0.3      0.0          cur = arr1d[i]
    17      4999       1226.0      0.2      0.0          j = i - 1
    18   6256527    2074177.0      0.3     35.6          while j >= 0 and arr1d[j] > cur:
    19   6251528    2210004.0      0.4     38.0              arr1d[j + 1] = arr1d[j]
    20   6251528    1530568.0      0.2     26.3              j = j-1
    21      4999       1514.0      0.3      0.0          arr1d[j+1] = cur
    22
    23         1          1.0      1.0      0.0      return arr1d

